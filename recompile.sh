#!/bin/bash

# Script de Recompila√ß√£o Inteligente do Tailwind CSS
# Agatha's Web - Sistema de Build Autom√°tico

echo "üöÄ Sistema de Recompila√ß√£o Tailwind CSS - Agatha's Web"
echo "================================================="

# Verificar se Node.js est√° dispon√≠vel
if ! command -v node &> /dev/null; then
    echo "‚ùå Erro: Node.js n√£o encontrado. Por favor, instale o Node.js primeiro."
    exit 1
fi

# Verificar se npm est√° dispon√≠vel
if ! command -v npm &> /dev/null; then
    echo "‚ùå Erro: npm n√£o encontrado. Por favor, instale o npm primeiro."
    exit 1
fi

# Verificar se o arquivo de configura√ß√£o existe
if [ ! -f "tailwind.config.js" ]; then
    echo "‚ùå Erro: tailwind.config.js n√£o encontrado."
    exit 1
fi

# Verificar se o arquivo de entrada existe
if [ ! -f "assets/css/input.css" ]; then
    echo "‚ùå Erro: assets/css/input.css n√£o encontrado."
    exit 1
fi

# Instalar depend√™ncias se node_modules n√£o existir
if [ ! -d "node_modules" ]; then
    echo "üì¶ Instalando depend√™ncias do Node.js..."
    npm install
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro: Falha ao instalar depend√™ncias."
        exit 1
    fi
fi

# Fun√ß√£o para compila√ß√£o simples
compile_css() {
    echo "üî® Compilando CSS..."
    npm run build-css -- --minify
    if [ $? -eq 0 ]; then
        echo "‚úÖ Compila√ß√£o conclu√≠da com sucesso!"
        # Mostrar tamanho do arquivo
        if [ -f "assets/css/output.css" ]; then
            size=$(stat -f%z "assets/css/output.css" 2>/dev/null || stat -c%s "assets/css/output.css" 2>/dev/null)
            if [ ! -z "$size" ]; then
                kb_size=$(echo "scale=2; $size/1024" | bc -l 2>/dev/null || echo "$((size/1024))")
                echo "üìÅ Tamanho do arquivo: ${kb_size} KB"
            fi
        fi
        return 0
    else
        echo "‚ùå Erro na compila√ß√£o!"
        return 1
    fi
}

# Fun√ß√£o para modo watch
watch_mode() {
    echo "üëÄ Iniciando modo watch..."
    echo "   Monitorando: *.php, components/*.php, tailwind.config.js, assets/css/input.css"
    echo "   Pressione Ctrl+C para parar"
    echo ""
    npm run watch-css
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "Uso: ./recompile.sh [op√ß√£o]"
    echo ""
    echo "Op√ß√µes:"
    echo "  build       Compilar CSS uma vez (padr√£o)"
    echo "  watch       Modo watch - recompila automaticamente ao detectar mudan√ßas"
    echo "  help        Mostrar esta ajuda"
    echo "  --force     Recompilar for√ßando reinstala√ß√£o de depend√™ncias"
    echo ""
    echo "Exemplos:"
    echo "  ./recompile.sh build     # Compila o CSS uma vez"
    echo "  ./recompile.sh watch     # Inicia modo watch"
    echo "  ./recompile.sh --force   # Recompila for√ßando reinstala√ß√£o"
}

# Processar argumentos
case "${1:-build}" in
    "build")
        compile_css
        ;;
    "watch")
        watch_mode
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    "--force")
        echo "üîÑ Reinstalando depend√™ncias..."
        rm -rf node_modules package-lock.json
        npm install
        if [ $? -eq 0 ]; then
            compile_css
        else
            echo "‚ùå Erro ao reinstalar depend√™ncias."
            exit 1
        fi
        ;;
    *)
        echo "‚ùå Op√ß√£o inv√°lida: $1"
        echo "Use './recompile.sh help' para ver as op√ß√µes dispon√≠veis."
        exit 1
        ;;
esac